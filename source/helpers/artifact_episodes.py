# %% Retrieves the data from the sweep and makes a dataframe, and logs it as an artifact. 
import pandas as pd
import argparse
from pandas.api import types
import wandb
import os

def _create_parser() -> argparse.ArgumentParser:    
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--entity', type=str, default='cbellinger', help='Entity inside wandb.')
    parser.add_argument('--project', type=str, help='Project on wandb.')
    parser.add_argument('--sweep_id', type=str, help='Sweep id.')
    parser.add_argument('--run_id', type=str, default=None, help='Run id.  (optinal)')
    parser.add_argument('--csv_name', type=str, default='lastTrained_episodes_expander', help='name of csv file.')
    
    return parser

def _assert_types(df):
    print(df)
    assert types.is_int64_dtype(df['step'])
    assert types.is_int64_dtype(df['action'])
    assert types.is_float_dtype(df['reward'])
    assert types.is_int64_dtype(df['episode'])
    assert types.is_bool_dtype(df['measure'])
    if types.is_float_dtype(df['int_reward']):
        df['int_reward'] = df['int_reward'].astype(float)

def main(args):   
    with wandb.init(job_type='gather_episodes', project='amrl', entity='cbellinger') as run:
        df, sweep = get_episodes_df(entity=args.entity, project=args.project, sweep_id=args.sweep_id, run_id=args.run_id, csv_name=args.csv_name)
        #Log as artifact
        df.to_csv(f'sweeps/{args.sweep_id}/{args.csv_name}.csv.zip', index=False) # Save concatted episodes
        artifact = wandb.Artifact(f'episodes_{args.sweep_id}', type='data')
        artifact.add_file(f'sweeps/{args.sweep_id}/{args.csv_name}.csv.zip')
        run.log_artifact(artifact)
        
    
def underspecified_params(sweep):
    params = sweep.config['parameters']
    u = []

    for k,v in params.items():
        if k == 'seed' or k == 'obs-cost':
            continue
        values = v['value'] if 'value' in v else v['values']
        under = (len(values) > 1) if isinstance(values, list) else False
        if under:
            print(k,v)
            u.append(k)

    return u

def is_underspecified(sweep):
    return underspecified_params(sweep) != []

def get_episodes_df(*, entity, project, sweep_id, run_id=None, csv_name="lastTrained_episodes_expander"):
    """Downloads all the episode files and concatenates them into single dataframe."""
    api = wandb.Api()
    sweep = api.sweep(f"{entity}/{project}/{sweep_id}")
    
    runs = sweep.runs
    dfs = []
    os.makedirs(f'sweeps/{sweep.id}/plots', exist_ok=True)
    
    for run in runs:    
        if run_id is None or run_id in str(run):        
            os.makedirs(f'sweeps/{sweep.id}/plots/{run.id}', exist_ok=True)
            if not os.path.exists(f'sweeps/{sweep.id}/plots/{run.id}/{csv_name}.csv'):
                if run.state != 'finished':
                    print(f"Ignoring run {run.name} as it is in run state={run.state} and not 'finished'")
                    continue
                run.file(f"{csv_name}.csv").download(root=f"sweeps/{sweep.id}/plots/{run.id}")
            df = pd.read_csv(f"sweeps/{sweep.id}/plots/{run.id}/{csv_name}.csv")
            df = df[['action','reward','int_reward','ext_reward','measure','step','episode','detailed_name']]
            #
            # Make columns for all the hyperparameters
            for k,v in run.config.items():
                if k == 'run_dir':
                    continue
                df[k] = pd.Series([v for _ in range(len(df.index))])
            #
            dfs.append(df)
    df = pd.concat(dfs)
    #
    if isinstance(df.iloc[0]['action'],str):
        df = df.rename(columns={"action": "action_pair"})
        df[['skips', 'action']] =  df['action_pair'].str.split(" ", n = 1, expand = True)
        print(df)
        df['skips'] = df['skips'].str.replace('[', '')
        df['skips'] = df['skips'].str.replace(',', '')
        df['action'] = df['action'].str.replace(']', '')
        df['action'].astype('Int32')
        df['skips'].astype('Int32')
    
    # _assert_types(df)
    return df, sweep
    
# %%
# #  TESTING AREA
# sweep_id = 'adt3jhsg'
# df, sweep = get_episodes_df(entity='cbellinger', project='amrl', sweep_id=sweep_id)

# with wandb.init(job_type='gather_episodes', project='amrl', entity='rl-team') as run:
#     df.to_csv(f'sweeps/{sweep_id}/episodes_csv.zip', index=False) # Save concatted episodes
#     artifact = wandb.Artifact(f'episodes_{sweep_id}', type='dataframe')
#     artifact.add_file(f'sweeps/{sweep_id}/episodes_csv.zip')
#     run.log_artifact(artifact)

# %% Demo on how to use the artifact generated by this:
# api = wandb.Api()
# artifact = api.artifact('drozzy/PPO_CartPole/episodes_5mn1clpz:latest')
# artifact_dir = artifact.download()
# csv_path = f'{artifact_dir}/episodes_csv.zip'
# df2 = pd.read_csv(csv_path)
# df2

# %%
if __name__ == '__main__':
    args = _create_parser().parse_args()
    # args.csv_name = 'lastTrained_episodes_skipper'
    main(args)
# %%
# args = _create_parser().parse_args(['--sweep-id', '5mn1clpz', '--project', 'PPO_CartPole', '--entity', 'drozzy'])
# main(args)
# %%
